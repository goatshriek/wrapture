module Wrapture
  class Scope
    include Enumerable[(Wrapture::ClassSpec | Wrapture::EnumSpec)]

    @version: String

    def self.load_files: (Array[String] filenames) -> Wrapture::Scope
    attr_reader classes: Array[bot]
    attr_reader enums: Array[bot]
    attr_reader templates: Array[bot]
    def initialize: (?nil spec) -> nil
    def <<: (spec_hash spec) -> Wrapture::Scope
    def add_class_spec_hash: (spec_hash spec) -> Wrapture::ClassSpec
    def add_enum_spec_hash: (spec_hash spec) -> Wrapture::EnumSpec
    def definition_includes: -> Array[String]
    def each: { ((Wrapture::ClassSpec | Wrapture::EnumSpec) spec) -> void } -> void
    def name: -> String
    def overloads: (untyped parent) -> Array[bot]
    def overloads?: (untyped parent) -> bool
    def type: (untyped type_) -> Wrapture::ClassSpec
    def type?: (untyped type_) -> bool
  end
end
