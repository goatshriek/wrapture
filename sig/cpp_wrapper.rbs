module Wrapture
  class CppWrapper
    def self.declaration_filename: ( Wrapture::ClassSpec class_spec ) -> String
    def self.declare_spec: ( (Wrapture::ClassSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec ) { (String) -> void } -> void
    def self.define_spec: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec ) { (String) -> void } -> void
    def self.source_files: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec ) -> Array[String]
    def self.write_spec_source_files: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec, ?String dir) -> Array[String]

    def initialize: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec) -> void
    def ancestor_suffix: -> String
    def declaration_filename: -> String
    def declare: { (String) -> void } -> void
    def define: { (String) -> void } -> void
    def definition_filename: -> String
    def forward_declared?: -> bool
    def header_guard: -> String
    def resolve_param: (Wrapture::ParamSpec) -> String
    def source_files: -> Array[String]
    def write_cmake_files: (?String dir) -> Array[String]
    def write_declaration_file: (?String dir) -> String
    def write_definition_file: (?String dir) -> String
    def write_source_files: (?String dir) -> Array[String]

    private
    def autogen_pointer_constructor?: -> bool
    def castable?: (spec_hash wrapped_param) -> bool
    def class_functions: -> Array[Wrapture::FunctionSpec]
    def declaration_includes: -> Array[String]
    def declare_class: (Wrapture::ClassSpec spec) { (String) -> void } -> void
    def declare_constant: (Wrapture::ConstantSpec spec) { (String) -> void } -> void
    def declare_function: (Wrapture::FunctionSpec spec) { (String) -> void } -> void
    def define_class: (Wrapture::ClassSpec spec) { (String) -> void } -> void
    def define_constant: (Wrapture::ConstantSpec constant_spec, String class_name) { (String) -> void } -> void
    def define_enum: (Wrapture::EnumSpec spec) { (String) -> void } -> void
    def define_function: (Wrapture::FunctionSpec spec) { (String) -> void } -> void
    def definition_includes: -> Array[String]
    def enum_element_definition: (spec_hash element) -> String
    def enum_element_doc: (spec_hash element) { (String) -> void } -> void
    def equivalent_member_declaration: -> String
    def equivalent_member_field: -> String
    def factory_constructor_hash: -> String
    def function_declaration_param_list: (Wrapture::FunctionSpec) -> String
    def function_declaration_signature: (Wrapture::FunctionSpec) { (String) -> void } -> void
    def function_definition_param_list: (Wrapture::FunctionSpec) -> String
    def function_locals: (Wrapture::FunctionSpec spec) { (String) -> void } -> void
    def initializer_suffix: -> String
    def member_constructor_hash: -> spec_hash
    def pointer_constructor_hash: -> spec_hash
    def qualified_function_name: (Wrapture::FunctionSpec spec) -> String
    def return_cast: (String) -> String
    def return_statement: -> String
    def return_variable: -> String
    def this_struct: -> String
    def this_struct_pointer: -> String
    def wrapped_call_expression: -> String
  end
end
