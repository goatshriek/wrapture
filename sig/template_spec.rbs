module Wrapture
  class TemplateSpec
    @spec: untyped

    def self.replace_all_uses: (untyped spec, *untyped templates) -> bool
    def self.param?: (untyped spec, untyped param_name) -> bool
    def self.replace_param: (untyped spec, untyped param_name, untyped param_value) -> untyped
    def self.replace_param!: (untyped spec, untyped param_name, untyped param_value) -> untyped
    def self.replace_param_in_array: (untyped spec, untyped param_name, untyped param_value) -> untyped
    def self.replace_param_in_hash: (untyped spec, untyped param_name, untyped param_value) -> untyped
    def initialize: (untyped spec) -> void
    def direct_use?: (untyped spec) -> bool
    def instantiate: (?Hash[String, String] params) -> untyped
    def name: -> untyped
    def replace_uses: (untyped spec) -> bool
    def use?: (untyped spec) -> bool

    private
    def merge_use_with_hash: (untyped use) -> untyped
    def replace_uses_in_hash: (untyped spec) -> bool
    def replace_uses_in_array: (untyped spec) -> bool
  end
end
