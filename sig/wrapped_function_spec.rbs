module Wrapture
  class WrappedFunctionSpec
    @spec: spec_hash
    @error_action: (Wrapture::ActionSpec | nil)
    @error_rules: Array[Wrapture::RuleSpec]

    def self.normalize_spec_hash: (spec_hash spec) -> spec_hash
    def self.normalize_spec_hash!: (spec_hash spec) -> spec_hash

    attr_reader error_action: (Wrapture::ActionSpec | nil)
    attr_reader error_rules: Array[Wrapture::RuleSpec]

    def initialize: (spec_hash spec) -> void
    def call_from: (Wrapture::CppWrapper | Wrapture::PythonWrapper) -> String
    def error_check?: -> bool
    def includes: -> Array[String]
    def libraries: -> Array[String]
    def return_val_type: -> Wrapture::TypeSpec
    def use_return?: -> bool
  end
end
