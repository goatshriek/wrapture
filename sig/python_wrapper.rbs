module Wrapture
  class PythonWrapper
    def self.write_spec_setuptools_files: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec, ?String dir) -> Array[String]
    def self.write_spec_source_files: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec, ?String dir) -> Array[String]
    def initialize: ( (Wrapture::ClassSpec | Wrapture::EnumSpec | Wrapture::FunctionSpec | Wrapture::Scope) spec) -> void
    def resolve_param: (Wrapture::ParamSpec) -> String
    def write_setuptools_files: (?String dir) -> Array[String]
    def write_source_files: (?String dir) -> Array[String]

    private
    def add_class_type_object: (Wrapture::ClassSpec, ?Array[String] decref) { (String) -> void } -> void
    def add_scope_type_objects: { (String) -> void } -> void
    def castable?: (spec_hash wrapped_param) -> bool
    def define_class_type_objects: { (String) -> void } -> void
    def define_class_type_struct: { (String) -> void } -> void
    def define_enum_type_objects: { (String) -> void } -> void
    def define_function_wrapper: { (String) -> void } -> void
    def define_module: { (String) -> void } -> void
    def define_scope_type_objects: { (String) -> void } -> void
    def function_wrapper_name: (Wrapture::FunctionSpec) -> String
    def scope_types_ready: { (String) -> void } -> void
    def type_struct_name: (Wrapture::Named thing) -> String
  end
end