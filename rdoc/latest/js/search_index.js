var search_data = {"index":{"searchIndex":["wrapture","actionspec","classspec","comment","constantspec","enumspec","functionspec","invaliddoc","invalidspeckey","invalidtemplateusage","missingspeckey","nonamespace","paramspec","rulespec","scope","structspec","templatespec","typespec","undefinablespec","unsupportedspecversion","wrappedfunctionspec","wraptureerror","<<()","==()","add_class_spec_hash()","add_enum_spec_hash()","base()","call_from()","cast()","cast_expression()","check()","constructor?()","declaration()","declaration()","declaration()","declaration_includes()","declaration_includes()","definable?()","definition()","definition()","definition_includes()","definition_includes()","direct_use?()","doc()","doc()","effective_type()","empty?()","equivalent_pointer?()","equivalent_struct?()","error_check()","error_check?()","format()","format_as_doxygen()","function?()","generate_wrapper()","generate_wrappers()","generate_wrappers()","includes()","includes()","includes()","includes()","includes()","instantiate()","member_list()","member_list_with_defaults()","members()","members?()","name()","name()","name()","name()","name()","name()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_list()","normalize_boolean()","normalize_includes()","normalize_param_list()","normalize_return_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash()","normalize_spec_hash!()","normalize_spec_hash!()","normalize_spec_hash!()","overloads()","overloads?()","overloads?()","param?()","param_list()","parent_name()","pointer?()","pointer_declaration()","pointer_wrapper?()","qualified_name()","replace_all_uses()","replace_param()","replace_param!()","replace_uses()","resolve()","resolve_type()","resolve_wrapped_param()","return_expression()","return_expression()","return_val_type()","rules_check()","self?()","signature()","signature()","signature()","spec_version()","struct_name()","supports_version?()","take()","this_struct()","this_struct_pointer()","to_s()","type()","type()","type?()","type?()","use?()","use_return?()","use_return?()","validate_doc()","variable()","variadic?()","variadic?()","variadic?()","virtual?()","readme"],"longSearchIndex":["wrapture","wrapture::actionspec","wrapture::classspec","wrapture::comment","wrapture::constantspec","wrapture::enumspec","wrapture::functionspec","wrapture::invaliddoc","wrapture::invalidspeckey","wrapture::invalidtemplateusage","wrapture::missingspeckey","wrapture::nonamespace","wrapture::paramspec","wrapture::rulespec","wrapture::scope","wrapture::structspec","wrapture::templatespec","wrapture::typespec","wrapture::undefinablespec","wrapture::unsupportedspecversion","wrapture::wrappedfunctionspec","wrapture::wraptureerror","wrapture::scope#<<()","wrapture::typespec#==()","wrapture::scope#add_class_spec_hash()","wrapture::scope#add_enum_spec_hash()","wrapture::typespec#base()","wrapture::wrappedfunctionspec#call_from()","wrapture::classspec#cast()","wrapture::typespec#cast_expression()","wrapture::rulespec#check()","wrapture::functionspec#constructor?()","wrapture::constantspec#declaration()","wrapture::functionspec#declaration()","wrapture::structspec#declaration()","wrapture::constantspec#declaration_includes()","wrapture::functionspec#declaration_includes()","wrapture::functionspec#definable?()","wrapture::constantspec#definition()","wrapture::functionspec#definition()","wrapture::constantspec#definition_includes()","wrapture::functionspec#definition_includes()","wrapture::templatespec#direct_use?()","wrapture::functionspec#doc()","wrapture::paramspec#doc()","wrapture::classspec::effective_type()","wrapture::comment#empty?()","wrapture::typespec#equivalent_pointer?()","wrapture::typespec#equivalent_struct?()","wrapture::wrappedfunctionspec#error_check()","wrapture::wrappedfunctionspec#error_check?()","wrapture::comment#format()","wrapture::comment#format_as_doxygen()","wrapture::typespec#function?()","wrapture::enumspec#generate_wrapper()","wrapture::classspec#generate_wrappers()","wrapture::scope#generate_wrappers()","wrapture::actionspec#includes()","wrapture::paramspec#includes()","wrapture::structspec#includes()","wrapture::typespec#includes()","wrapture::wrappedfunctionspec#includes()","wrapture::templatespec#instantiate()","wrapture::structspec#member_list()","wrapture::structspec#member_list_with_defaults()","wrapture::structspec#members()","wrapture::structspec#members?()","wrapture::classspec#name()","wrapture::enumspec#name()","wrapture::functionspec#name()","wrapture::paramspec#name()","wrapture::structspec#name()","wrapture::templatespec#name()","wrapture::typespec#name()","wrapture::actionspec::new()","wrapture::classspec::new()","wrapture::comment::new()","wrapture::constantspec::new()","wrapture::enumspec::new()","wrapture::functionspec::new()","wrapture::invaliddoc::new()","wrapture::invalidspeckey::new()","wrapture::invalidtemplateusage::new()","wrapture::missingspeckey::new()","wrapture::paramspec::new()","wrapture::rulespec::new()","wrapture::scope::new()","wrapture::structspec::new()","wrapture::templatespec::new()","wrapture::typespec::new()","wrapture::undefinablespec::new()","wrapture::wrappedfunctionspec::new()","wrapture::paramspec::new_list()","wrapture::normalize_boolean()","wrapture::normalize_includes()","wrapture::paramspec::normalize_param_list()","wrapture::functionspec::normalize_return_hash()","wrapture::actionspec::normalize_spec_hash()","wrapture::classspec::normalize_spec_hash()","wrapture::constantspec::normalize_spec_hash()","wrapture::enumspec::normalize_spec_hash()","wrapture::functionspec::normalize_spec_hash()","wrapture::paramspec::normalize_spec_hash()","wrapture::rulespec::normalize_spec_hash()","wrapture::structspec::normalize_spec_hash()","wrapture::typespec::normalize_spec_hash()","wrapture::wrappedfunctionspec::normalize_spec_hash()","wrapture::enumspec::normalize_spec_hash!()","wrapture::paramspec::normalize_spec_hash!()","wrapture::typespec::normalize_spec_hash!()","wrapture::scope#overloads()","wrapture::classspec#overloads?()","wrapture::scope#overloads?()","wrapture::templatespec::param?()","wrapture::functionspec#param_list()","wrapture::classspec#parent_name()","wrapture::typespec#pointer?()","wrapture::structspec#pointer_declaration()","wrapture::classspec#pointer_wrapper?()","wrapture::functionspec#qualified_name()","wrapture::templatespec::replace_all_uses()","wrapture::templatespec::replace_param()","wrapture::templatespec::replace_param!()","wrapture::templatespec#replace_uses()","wrapture::typespec#resolve()","wrapture::functionspec#resolve_type()","wrapture::functionspec#resolve_wrapped_param()","wrapture::functionspec#return_expression()","wrapture::typespec#return_expression()","wrapture::wrappedfunctionspec#return_val_type()","wrapture::structspec#rules_check()","wrapture::typespec#self?()","wrapture::functionspec#signature()","wrapture::paramspec::signature()","wrapture::paramspec#signature()","wrapture::spec_version()","wrapture::classspec#struct_name()","wrapture::supports_version?()","wrapture::actionspec#take()","wrapture::classspec#this_struct()","wrapture::classspec#this_struct_pointer()","wrapture::typespec#to_s()","wrapture::classspec#type()","wrapture::scope#type()","wrapture::classspec#type?()","wrapture::scope#type?()","wrapture::templatespec#use?()","wrapture::rulespec#use_return?()","wrapture::wrappedfunctionspec#use_return?()","wrapture::comment::validate_doc()","wrapture::typespec#variable()","wrapture::functionspec#variadic?()","wrapture::paramspec#variadic?()","wrapture::typespec#variadic?()","wrapture::functionspec#virtual?()",""],"info":[["Wrapture","","Wrapture.html","","<p>Classes and functions for generating language wrappers\n"],["Wrapture::ActionSpec","","Wrapture/ActionSpec.html","","<p>An action to take within a generated program.\n"],["Wrapture::ClassSpec","","Wrapture/ClassSpec.html","","<p>A description of a class, including its constants, functions, and other details.\n"],["Wrapture::Comment","","Wrapture/Comment.html","","<p>A comment that can be inserted in generated source code.\n<p>Comments are primarily used to insert documentation …\n"],["Wrapture::ConstantSpec","","Wrapture/ConstantSpec.html","","<p>A description of a constant.\n"],["Wrapture::EnumSpec","","Wrapture/EnumSpec.html","","<p>A description of an enumeration.\n"],["Wrapture::FunctionSpec","","Wrapture/FunctionSpec.html","","<p>A description of a function to be generated, including details about the underlying implementation.\n"],["Wrapture::InvalidDoc","","Wrapture/InvalidDoc.html","","<p>A documentation string is invalid.\n"],["Wrapture::InvalidSpecKey","","Wrapture/InvalidSpecKey.html","","<p>The spec has a key that is not valid.\n"],["Wrapture::InvalidTemplateUsage","","Wrapture/InvalidTemplateUsage.html","","<p>A template has been invoked in an unsupported way.\n"],["Wrapture::MissingSpecKey","","Wrapture/MissingSpecKey.html","","<p>The spec is missing a key that is required.\n"],["Wrapture::NoNamespace","","Wrapture/NoNamespace.html","","<p>Missing a namespace in the class spec\n"],["Wrapture::ParamSpec","","Wrapture/ParamSpec.html","","<p>A description of a parameter used in a generated function.\n"],["Wrapture::RuleSpec","","Wrapture/RuleSpec.html","","<p>A condition (or set of conditions) that a struct or its members must meet in order to conform to a given …\n"],["Wrapture::Scope","","Wrapture/Scope.html","","<p>Describes a scope of one or more class specifications.\n"],["Wrapture::StructSpec","","Wrapture/StructSpec.html","","<p>A description of a struct.\n"],["Wrapture::TemplateSpec","","Wrapture/TemplateSpec.html","","<p>A template that can be referenced in other specs.\n<p>Templates provide a way to re-use common specification …\n"],["Wrapture::TypeSpec","","Wrapture/TypeSpec.html","","<p>A description of a type used in a specification.\n"],["Wrapture::UndefinableSpec","","Wrapture/UndefinableSpec.html","","<p>The spec cannot be defined due to missing information.\n"],["Wrapture::UnsupportedSpecVersion","","Wrapture/UnsupportedSpecVersion.html","","<p>The spec version is not supported by this version of Wrapture.\n"],["Wrapture::WrappedFunctionSpec","","Wrapture/WrappedFunctionSpec.html","","<p>A description of a function to be wrapped by another language.\n"],["Wrapture::WraptureError","","Wrapture/WraptureError.html","","<p>An error from the Wrapture library\n"],["<<","Wrapture::Scope","Wrapture/Scope.html#method-i-3C-3C","(spec)","<p>Adds a class or template specification to the scope.\n<p>This does not set the scope as the owner of the class …\n"],["==","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-3D-3D","(other)","<p>Compares this TypeSpec with <code>other</code>. Comparison happens by converting each object to a string using to_s …\n"],["add_class_spec_hash","Wrapture::Scope","Wrapture/Scope.html#method-i-add_class_spec_hash","(spec)","<p>Adds a class to the scope created from the given specification hash.\n"],["add_enum_spec_hash","Wrapture::Scope","Wrapture/Scope.html#method-i-add_enum_spec_hash","(spec)","<p>Adds an enumeration to the scope created from the given specification hash.\n"],["base","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-base","()","<p>The name of this type with all special characters removed.\n"],["call_from","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-call_from","(function_spec)","<p>Generates a function call from a provided FunctionSpec. Paremeters and types are resolved using this …\n"],["cast","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-cast","(instance, to, from = name)","<p>Returns a cast of an instance of this class with the provided name to the specified type. Optionally …\n"],["cast_expression","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-cast_expression","(expression)","<p>An expression casting the result of a given expression into this type.\n<p>Added in release 0.4.2.\n"],["check","Wrapture::RuleSpec","Wrapture/RuleSpec.html#method-i-check","(variable: nil, return_val: 'return_val')","<p>A string containing a check for a struct of the given name for this rule.\n<p><code>variable</code> can be provided to …\n"],["constructor?","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-constructor-3F","()","<p>True if the function is a constructor, false otherwise.\n"],["declaration","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-i-declaration","()","<p>Yields each line of the declaration of this constant, including any documentation.\n"],["declaration","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-declaration","()","<p>Yields each line of the declaration of the function, including any documentation.\n"],["declaration","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-declaration","(name)","<p>A declaration of the struct with the given variable name.\n"],["declaration_includes","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-i-declaration_includes","()","<p>A list of includes needed for the declaration of this constant.\n"],["declaration_includes","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-declaration_includes","()","<p>A list of includes needed for the declaration of the function.\n"],["definable?","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-definable-3F","()","<p>True if this function can be defined.\n"],["definition","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-i-definition","(class_name)","<p>The definition of this constant.\n"],["definition","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-definition","()","<p>Gives the definition of the function in a block, line by line.\n"],["definition_includes","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-i-definition_includes","()","<p>A list of includes needed for the definition of this constant.\n"],["definition_includes","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-definition_includes","()","<p>A list of includes needed for the definition of the function.\n"],["direct_use?","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-i-direct_use-3F","(spec)","<p>True if the given spec is a reference to this template that will be completely replaced by the template. …\n"],["doc","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-doc","()","<p>A Comment holding the function documentation.\n"],["doc","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-i-doc","()","<p>A Comment holding the parameter documentation.\n"],["effective_type","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-c-effective_type","(spec)","<p>Gives the effective type of the given class spec hash.\n"],["empty?","Wrapture::Comment","Wrapture/Comment.html#method-i-empty-3F","()","<p>True if this comment is empty, false otherwise.\n"],["equivalent_pointer?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-equivalent_pointer-3F","()","<p>True if this type is an equivalent struct pointer reference.\n"],["equivalent_struct?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-equivalent_struct-3F","()","<p>True if this type is an equivalent struct reference.\n"],["error_check","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-error_check","(return_val: 'return_val')","<p>Yields each line of the error check and any actions taken for this wrapped function. If this function …\n"],["error_check?","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-error_check-3F","()","<p>True if the wrapped function has an error check associated with it.\n"],["format","Wrapture::Comment","Wrapture/Comment.html#method-i-format","(line_prefix: '// ', first_line: nil, last_line: nil, max_line_length: 80)","<p>Yields each line of the comment formatted as specified.\n"],["format_as_doxygen","Wrapture::Comment","Wrapture/Comment.html#method-i-format_as_doxygen","(max_line_length: 80)","<p>Yields each line of the comment formatted using Doxygen style.\n"],["function?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-function-3F","()","<p>True if this type is a function.\n"],["generate_wrapper","Wrapture::EnumSpec","Wrapture/EnumSpec.html#method-i-generate_wrapper","()","<p>Generates the wrapper definition file.\n"],["generate_wrappers","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-generate_wrappers","()","<p>Generates the wrapper class declaration and definition files.\n"],["generate_wrappers","Wrapture::Scope","Wrapture/Scope.html#method-i-generate_wrappers","()","<p>Generates the wrapper class files for all classes in the scope.\n"],["includes","Wrapture::ActionSpec","Wrapture/ActionSpec.html#method-i-includes","()","<p>A list of includes needed for the action.\n"],["includes","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-i-includes","()","<p>A list of includes needed for this parameter.\n"],["includes","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-includes","()","<p>A list of includes required for this struct.\n"],["includes","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-includes","()","<p>A list of includes needed for this type.\n"],["includes","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-includes","()","<p>A list of includes required for this function call.\n"],["instantiate","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-i-instantiate","(params = nil)","<p>Returns a spec hash of this template with the provided parameters substituted.\n"],["member_list","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-member_list","()","<p>A string containing the typed members of the struct, separated by commas.\n"],["member_list_with_defaults","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-member_list_with_defaults","()","<p>A string containing the typed members of the struct, with their default values if provided, separated …\n"],["members","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-members","()","<p>The members of the struct\n"],["members?","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-members-3F","()","<p>True if there are members included in the struct specification.\n"],["name","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-name","()","<p>The name of the class\n"],["name","Wrapture::EnumSpec","Wrapture/EnumSpec.html#method-i-name","()","<p>The name of the enumeration.\n"],["name","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-name","()","<p>The name of the function.\n"],["name","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-i-name","()","<p>The name of the parameter.\n"],["name","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-name","()","<p>The name of this struct\n"],["name","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-i-name","()","<p>The name of the template.\n"],["name","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-name","()","<p>The name of the type.\n"],["new","Wrapture::ActionSpec","Wrapture/ActionSpec.html#method-c-new","(spec)","<p>Creates an action spec based on the provided spec hash.\n<p>The hash must have the following keys:\n<p>name &mdash; the …\n"],["new","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-c-new","(spec, scope: Scope.new)","<p>Creates a class spec based on the provided hash spec.\n<p>The scope can be provided if available.\n<p>The hash …\n"],["new","Wrapture::Comment","Wrapture/Comment.html#method-c-new","(comment = '')","<p>Creates a comment from a string. If the provided string is nil, then an empty string is used.\n"],["new","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-c-new","(spec)","<p>Creates a constant spec based on the provided hash spec\n<p>The hash must have the following keys:\n<p>name &mdash; the …\n"],["new","Wrapture::EnumSpec","Wrapture/EnumSpec.html#method-c-new","(spec)","<p>Creates an enumeration specification based on the provided hash spec.\n"],["new","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-c-new","(spec, owner = Scope.new, constructor: false, destructor: false)","<p>Creates a function spec based on the provided function spec.\n<p>The hash must have the following keys:\n<p>name … &mdash; "],["new","Wrapture::InvalidDoc","Wrapture/InvalidDoc.html#method-c-new","(message)","<p>Creates an InvalidDoc with the given message.\n"],["new","Wrapture::InvalidSpecKey","Wrapture/InvalidSpecKey.html#method-c-new","(message, valid_keys: [])","<p>Creates an InvalidSpecKey with the given message. A list of valid values may optionally be passed to …\n"],["new","Wrapture::InvalidTemplateUsage","Wrapture/InvalidTemplateUsage.html#method-c-new","(message)","<p>Creates an InvalidTemplateUsage with the given message.\n"],["new","Wrapture::MissingSpecKey","Wrapture/MissingSpecKey.html#method-c-new","(message)","<p>Creates a MissingSpecKey with the given message.\n"],["new","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-new","(spec)","<p>Creates a parameter specification based on the provided hash spec.\n"],["new","Wrapture::RuleSpec","Wrapture/RuleSpec.html#method-c-new","(spec)","<p>Creates a rule spec based on the provided spec. Rules may be one of a number of different varieties. …\n"],["new","Wrapture::Scope","Wrapture/Scope.html#method-c-new","(spec = nil)","<p>Creates an empty scope with no classes in it.\n"],["new","Wrapture::StructSpec","Wrapture/StructSpec.html#method-c-new","(spec)","<p>Creates a struct spec based on the provided spec hash.\n<p>The hash must have the following keys:\n<p>name &mdash; the …\n"],["new","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-c-new","(spec)","<p>Creates a new template with the given hash spec.\n"],["new","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-c-new","(spec = 'void')","<p>Creates a parameter specification based on the provided hash <code>spec</code>. <code>spec</code> can be a string instead of a …\n"],["new","Wrapture::UndefinableSpec","Wrapture/UndefinableSpec.html#method-c-new","(message)","<p>Creates an UndefinableSpec with error <code>message</code>.\n"],["new","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-c-new","(spec)","<p>Creates a wrapped function spec based on the provided spec.\n<p>The hash must have the following keys:\n<p>name … &mdash; "],["new_list","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-new_list","(spec_list)","<p>Returns a list of new ParamSpecs based on the provided array of parameter specification hashes.\n"],["normalize_boolean","Wrapture","Wrapture.html#method-c-normalize_boolean","(spec, key)","<p>Normalizes a spec key to be boolean, raising an error if it is not. Keys that are not present are defaulted …\n"],["normalize_includes","Wrapture","Wrapture.html#method-c-normalize_includes","(includes)","<p>Normalizes an include list for an element. A single string will be converted into an array containing …\n"],["normalize_param_list","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-normalize_param_list","(spec_list)","<p>Returns a normalized copy of a list of parameter hash specifications in place.\n<p>Multiple variadic parameters …\n"],["normalize_return_hash","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-c-normalize_return_hash","(spec)","<p>Returns a copy of the return type specification <code>spec</code>.\n"],["normalize_spec_hash","Wrapture::ActionSpec","Wrapture/ActionSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a rule. Normalization checks for invalid keys and unrecognized conditions. …\n"],["normalize_spec_hash","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a class. Normalization will check for things like invalid keys, duplicate …\n"],["normalize_spec_hash","Wrapture::ConstantSpec","Wrapture/ConstantSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a constant. Normalization will check for things like invalid keys, …\n"],["normalize_spec_hash","Wrapture::EnumSpec","Wrapture/EnumSpec.html#method-c-normalize_spec_hash","(spec)","<p>Returns a normalized copy of a hash specification of an enumeration in place. See normalize_spec_hash …\n"],["normalize_spec_hash","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a function. Normalization will check for things like invalid keys, …\n"],["normalize_spec_hash","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-normalize_spec_hash","(spec)","<p>Returns a normalized copy of the hash specification of a parameter in <code>spec</code>. See normalize_spec_hash! …\n"],["normalize_spec_hash","Wrapture::RuleSpec","Wrapture/RuleSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a rule. Normalization checks for invalid keys and unrecognized conditions. …\n"],["normalize_spec_hash","Wrapture::StructSpec","Wrapture/StructSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a struct. Normalization will check for things like invalid keys, duplicate …\n"],["normalize_spec_hash","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-c-normalize_spec_hash","(spec)","<p>Returns a normalized copy of the hash specification of a type in <code>spec</code>. See normalize_spec_hash! for details. …\n"],["normalize_spec_hash","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-c-normalize_spec_hash","(spec)","<p>Normalizes a hash specification of a wrapped function. Normalization will check for things like invalid …\n"],["normalize_spec_hash!","Wrapture::EnumSpec","Wrapture/EnumSpec.html#method-c-normalize_spec_hash-21","(spec)","<p>Normalizes a hash specification of an enumeration in place. Normalization will remove duplicate entries …\n"],["normalize_spec_hash!","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-normalize_spec_hash-21","(spec)","<p>Normalizes the hash specification of a parameter in <code>spec</code> in place. Normalization will remove duplicate …\n"],["normalize_spec_hash!","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-c-normalize_spec_hash-21","(spec)","<p>Normalizes the hash specification of a type in <code>spec</code> in place. This will normalize the include list.\n"],["overloads","Wrapture::Scope","Wrapture/Scope.html#method-i-overloads","(parent)","<p>A list of ClassSpecs in this scope that are overloads of the given class.\n"],["overloads?","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-overloads-3F","(parent_spec)","<p>True if this class overloads the given one. A class is considered an overload if its parent is the given …\n"],["overloads?","Wrapture::Scope","Wrapture/Scope.html#method-i-overloads-3F","(parent)","<p>True if there is an overload of the given class in this scope.\n"],["param?","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-c-param-3F","(spec, param_name)","<p>True if the provided spec is a template parameter with the given name.\n"],["param_list","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-param_list","()","<p>A string with the parameter list for this function.\n"],["parent_name","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-parent_name","()","<p>The name of the parent of this class, or nil if there is no parent.\n"],["pointer?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-pointer-3F","()","<p>True if this type is a pointer.\n"],["pointer_declaration","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-pointer_declaration","(name)","<p>A declaration of a pointer to the struct with the given variable name.\n"],["pointer_wrapper?","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-pointer_wrapper-3F","()","<p>Determines if this class is a wrapper for a struct pointer or not.\n"],["qualified_name","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-qualified_name","()","<p>The name of the function with the class name, if it exists.\n"],["replace_all_uses","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-c-replace_all_uses","(spec, *templates)","<p>Replaces all instances of the given templates in the provided spec. This is done recursively until no …\n"],["replace_param","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-c-replace_param","(spec, param_name, param_value)","<p>Creates a new spec based on the given one with all instances of a parameter with the given name replaced …\n"],["replace_param!","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-c-replace_param-21","(spec, param_name, param_value)","<p>Replaces all instances of a parameter with the given name with the given value in the provided spec. …\n"],["replace_uses","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-i-replace_uses","(spec)","<p>Replaces all references to this template with an instantiation of it in the given spec. Returns true …\n"],["resolve","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-resolve","(owner)","<p>Creates a new TypeSpec within the scope of <code>owner</code> that will be directly usable. This will replace equivalent …\n"],["resolve_type","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-resolve_type","(type)","<p>A resolved type, given a TypeSpec <code>type</code>. Resolved types will not have any keywords like <code>equivalent-struct</code> …\n"],["resolve_wrapped_param","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-resolve_wrapped_param","(param_spec)","<p>Gives an expression for calling a given parameter within this function. Equivalent structs and pointers …\n"],["return_expression","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-return_expression","(func_name: name)","<p>Calls return_expression on the return type of this function. <code>func_name</code> is passed to return_expression …\n"],["return_expression","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-return_expression","(func, func_name: func.name)","<p>A string with a declaration of FunctionSpec <code>func</code> with this type as the return value. <code>func_name</code> can be …\n"],["return_val_type","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-return_val_type","()","<p>A TypeSpec describing the type of the return value.\n<p>Changed in release 0.4.2 to return a TypeSpec instead …\n"],["rules_check","Wrapture::StructSpec","Wrapture/StructSpec.html#method-i-rules_check","(name)","<p>A string containing an expression that returns true if the struct with the given name meets all rules …\n"],["self?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-self-3F","()","<p>True if this type is a reference to a class instance.\n"],["signature","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-signature","(func_name: name)","<p>The signature of the function. <code>func_name</code> can be used to override the function name if needed, for example …\n"],["signature","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-c-signature","(param_list, owner)","<p>A string with a comma-separated list of parameters (using resolved type) and names, fit for use in a …\n"],["signature","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-i-signature","(owner)","<p>The parameter type and name, suitable for use in a function signature or declaration. <code>owner</code> must be the …\n"],["spec_version","Wrapture","Wrapture.html#method-c-spec_version","(spec)","<p>Returns the spec version for the provided spec. If the version is not provided in the spec, the newest …\n"],["struct_name","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-struct_name","()","<p>The name of the equivalent struct of this class.\n"],["supports_version?","Wrapture","Wrapture.html#method-c-supports_version-3F","(version)","<p>Returns true if the version of the spec is supported by this version of Wrapture. Otherwise returns false. …\n"],["take","Wrapture::ActionSpec","Wrapture/ActionSpec.html#method-i-take","()","<p>A string containing the invocation of this action.\n"],["this_struct","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-this_struct","()","<p>Gives a code snippet that accesses the equivalent struct from within the class using the &#39;this&#39; …\n"],["this_struct_pointer","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-this_struct_pointer","()","<p>Gives a code snippet that accesses the equivalent struct pointer from within the class using the &#39;this&#39; …\n"],["to_s","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-to_s","()","<p>Gives a string representation of this type (its name).\n<p>Added in release 0.4.2.\n"],["type","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-type","(type)","<p>Returns the ClassSpec for the given type in this class&#39;s scope.\n"],["type","Wrapture::Scope","Wrapture/Scope.html#method-i-type","(type)","<p>Returns the ClassSpec for the given <code>type</code> in the scope, if one exists.\n"],["type?","Wrapture::ClassSpec","Wrapture/ClassSpec.html#method-i-type-3F","(type)","<p>Returns true if the given type exists in this class&#39;s scope.\n"],["type?","Wrapture::Scope","Wrapture/Scope.html#method-i-type-3F","(type)","<p>Returns true if there is a class matching the given <code>type</code> in this scope.\n"],["use?","Wrapture::TemplateSpec","Wrapture/TemplateSpec.html#method-i-use-3F","(spec)","<p>True if the given spec is a reference to this template.\n"],["use_return?","Wrapture::RuleSpec","Wrapture/RuleSpec.html#method-i-use_return-3F","()","<p>True if this rule requires a return value. This is equivalent to checking for the presence of RETURN_VALUE_KEYWORD …\n"],["use_return?","Wrapture::WrappedFunctionSpec","Wrapture/WrappedFunctionSpec.html#method-i-use_return-3F","()","<p>True if calling this wrapped function needs to save/use the return value for error checking. This is …\n"],["validate_doc","Wrapture::Comment","Wrapture/Comment.html#method-c-validate_doc","(doc)","<p>Validates a doc string.\n"],["variable","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-variable","(var_name = nil)","<p>A string with a declaration of a variable named <code>var_name</code> of this type. If <code>var_name</code> is nil then this will …\n"],["variadic?","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-variadic-3F","()","<p>True if the function is variadic.\n"],["variadic?","Wrapture::ParamSpec","Wrapture/ParamSpec.html#method-i-variadic-3F","()","<p>True if this parameter is variadic (the name is equal to &#39;…&#39;).\n"],["variadic?","Wrapture::TypeSpec","Wrapture/TypeSpec.html#method-i-variadic-3F","()","<p>True if this type is a variadic parameter type (name is equal to <code>...</code>).\n"],["virtual?","Wrapture::FunctionSpec","Wrapture/FunctionSpec.html#method-i-virtual-3F","()","<p>True if the function is virtual.\n"],["README","","README_md.html","","<p>Wrapture\n<p><img src=\"https://travis-ci.org/goatshriek/wrapture.svg?branch=master\">\n<img src=\"https://codecov.io/gh/goatshriek/wrapture/branch/master/graph/badge.svg\"> ...\n"]]}}