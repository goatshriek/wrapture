# SPDX-License-Identifier: Apache-2.0

# frozen_string_literal: true

#--
# Copyright 2021 Joel E. Anderson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#++

module Wrapture
  # A wrapper that generates Python wrappers for given specs.
  class PythonWrapper
    # Generates the setup.py script and other supporting files for the
    # given spec. These can be used to package the files generated by
    # +write_source_files+. This is equivalent to instantiating a wrapper
    # with the spec and then calling write_setuptools_files on that.
    def self.write_spec_setuptools_files(spec, **kwargs)
      wrapper = new(spec)
      wrapper.write_setuptools_files(**kwargs)
    end

    # Generates C source files that form a Python extension, returning a list
    # of the files generated. This is equivalent to instantiating a wrapper
    # with the given spec, and then calling write_source_files on that.
    def self.write_spec_source_files(spec, **kwargs)
      wrapper = new(spec)
      wrapper.write_source_files(**kwargs)
    end

    # Creates a C++ wrapper for a given spec.
    def initialize(spec)
      @spec = spec
    end

    # Generates the setup.py script and other supporting files for this
    # instance's spec. These can be used to package the files generated by
    # +write_source_files+.
    def write_setuptools_files(dir: Dir.pwd)
      unless @spec.is_a?(Scope)
        raise WrapError, 'only a scope can be used for setuptools generation'
      end

      File.open(File.join(dir, 'setup.py'), 'w') do |file|
        file.puts <<~SETUPTEXT
          from distutils.core import setup, Extension

          #{@spec.name}_mod = Extension('#{@spec.name}',
                              sources = ['#{@spec.name}.c'])

          setup (name = '#{@spec.name}',
                 version = '1.0',
                 description = 'This is a demo package',
                 ext_modules = [#{@spec.name}_mod])
        SETUPTEXT
      end
    end

    # Generates C source files that form an extension module of Python with
    # the functionality of this instance's spec, returning a list of the
    # files generated. +dir+ specifies the directory that the files should
    # be written into. The default is the current working directory.
    def write_source_files(dir: Dir.pwd)
      unless @spec.is_a?(Scope)
        raise WrapError, 'only a scope can be used for module generation'
      end

      filename = "#{@spec.name}.c"

      File.open(File.join(dir, filename), 'w') do |file|
        file.puts <<~SOURCETEXT
          #define PY_SSIZE_T_CLEAN
          #include <Python.h>

          static PyObject *
          #{@spec.name}_system(PyObject *self, PyObject *args)
          {
              const char *command;
              int sts;

              if (!PyArg_ParseTuple(args, "s", &command))
                  return NULL;
              sts = system(command);
              return PyLong_FromLong(sts);
          }

          static PyMethodDef #{@spec.name}_methods[] = {
            {"system",  #{@spec.name}_system, METH_VARARGS,
              "Execute a shell command."},
            {NULL, NULL, 0, NULL}        /* Sentinel */
          };

          #{scope_class_objects}

          static struct PyModuleDef #{@spec.name}_module = {
            PyModuleDef_HEAD_INIT,
            "#{@spec.name}",   /* name of module */
            NULL,              /* module documentation, may be NULL */
            -1,                /* size of per-interpreter state of the module,
                                  or -1 if the module keeps state in global variables. */
            #{@spec.name}_methods
          };

          PyMODINIT_FUNC
          PyInit_#{@spec.name}(void)
          {
            PyObject *m;

            #{scope_types_ready}

            m = PyModule_Create(&#{@spec.name}_module);
            if( !m ){
              return NULL;
            }

            #{add_scope_type_objects}

            return m;
          }
        SOURCETEXT
      end

      filename
    end

    private

    # Adds type objects for all classes and enums in this module.
    def add_scope_type_objects
      (@spec.classes + @spec.enums).flat_map do |item|
        <<~SOURCECODE
          Py_INCREF(&#{item.name.capitalize}_type_object);
          if (PyModule_AddObject(m, "#{item.name.capitalize}", (PyObject *) &#{item.name.capitalize}_type_object) < 0) {
            Py_DECREF(&#{item.name.capitalize}_type_object);
            // maybe need to decref other types already added?
            Py_DECREF(m);
            return NULL;
          }
        SOURCECODE
      end.join("\n")
    end

    # Creates C code to create all of the classes in this module.
    def scope_class_objects
      (@spec.classes + @spec.enums).flat_map do |item|
        <<~SOURCECODE
          typedef struct {
              PyObject_HEAD
              /* Type-specific fields go here. */
          } #{item.name.capitalize}_type_struct;

          static PyTypeObject #{item.name.capitalize}_type_object = {
              PyVarObject_HEAD_INIT(NULL, 0)
              .tp_name = "#{@spec.name}.#{item.name.capitalize}",
              .tp_doc = "Custom objects",
              .tp_basicsize = sizeof(#{item.name.capitalize}_type_struct),
              .tp_itemsize = 0,
              .tp_flags = Py_TPFLAGS_DEFAULT,
              .tp_new = PyType_GenericNew,
          };
        SOURCECODE
      end.join("\n")
    end

    # Creates C code to execute PyType_Ready on each type in the module.
    def scope_types_ready
      (@spec.classes + @spec.enums).flat_map do |item|
        <<~SOURCECODE
          if (PyType_Ready(&#{item.name.capitalize}_type_object) < 0){
            return NULL;
          }
        SOURCECODE
      end.join("\n")
    end
  end
end
